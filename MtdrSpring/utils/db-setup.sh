#!/bin/bash
# Copyright (c) 2022 Oracle and/or its affiliates.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl.

# Fail on error
set -e


# Create Object Store Bucket (Should be replaced by terraform one day)
while ! state_done OBJECT_STORE_BUCKET; do
  echo "Checking object storage bucket"
#  oci os bucket create --compartment-id "$(state_get COMPARTMENT_OCID)" --name "$(state_get RUN_NAME)"
  if oci os bucket get --name "$(state_get RUN_NAME)-$(state_get MTDR_KEY)"; then
    state_set_done OBJECT_STORE_BUCKET
    echo "finished checking object storage bucket"
  fi
done


# Wait for Order DB OCID
while ! state_done MTDR_DB_OCID; do
  echo "`date`: Waiting for MTDR_DB_OCID"
  sleep 2
done


# Get Wallet
while ! state_done WALLET_GET; do
  echo "creating wallet"
  cd $MTDRWORKSHOP_LOCATION
  mkdir wallet
  cd wallet
  oci db autonomous-database generate-wallet --autonomous-database-id "$(state_get MTDR_DB_OCID)" --file 'wallet.zip' --password 'Welcome1' --generate-type 'ALL'
  unzip wallet.zip
  cd $MTDRWORKSHOP_LOCATION
  state_set_done WALLET_GET
  echo "finished creating wallet"
done


# Get DB Connection Wallet and to Object Store
while ! state_done CWALLET_SSO_OBJECT; do
  echo "grabbing wallet"
  cd $MTDRWORKSHOP_LOCATION/wallet
  oci os object put --bucket-name "$(state_get RUN_NAME)-$(state_get MTDR_KEY)" --name "cwallet.sso" --file 'cwallet.sso'
  cd $MTDRWORKSHOP_LOCATION
  state_set_done CWALLET_SSO_OBJECT
  echo "done grabbing wallet"
done


# Create Authenticated Link to Wallet
while ! state_done CWALLET_SSO_AUTH_URL; do
  echo "creating authenticated link to wallet"
  ACCESS_URI=`oci os preauth-request create --object-name 'cwallet.sso' --access-type 'ObjectRead' --bucket-name "$(state_get RUN_NAME)-$(state_get MTDR_KEY)" --name 'mtdrworkshop' --time-expires $(date '+%Y-%m-%d' --date '+7 days') --query 'data."access-uri"' --raw-output`
  state_set CWALLET_SSO_AUTH_URL "https://objectstorage.$(state_get REGION).oraclecloud.com${ACCESS_URI}"
  echo "done creating authenticated link to wallet"
done


# Give DB_PASSWORD priority
while ! state_done DB_PASSWORD; do
  echo "Waiting for DB_PASSWORD"
  sleep 5
done


# Create Inventory ATP Bindings
while ! state_done DB_WALLET_SECRET; do
  echo "creating Inventory ATP Bindings"
  cd $MTDRWORKSHOP_LOCATION/wallet
  cat - >sqlnet.ora <<!
WALLET_LOCATION = (SOURCE = (METHOD = file) (METHOD_DATA = (DIRECTORY="/mtdrworkshop/creds")))
SSL_SERVER_DN_MATCH=yes
!
  if kubectl create -f - -n mtdrworkshop; then
    state_set_done DB_WALLET_SECRET
  else
    echo "Error: Failure to create db-wallet-secret.  Retrying..."
    sleep 5
  fi <<!
apiVersion: v1
data:
  README: $(base64 -w0 README)
  cwallet.sso: $(base64 -w0 cwallet.sso)
  ewallet.p12: $(base64 -w0 ewallet.p12)
  keystore.jks: $(base64 -w0 keystore.jks)
  ojdbc.properties: $(base64 -w0 ojdbc.properties)
  sqlnet.ora: $(base64 -w0 sqlnet.ora)
  tnsnames.ora: $(base64 -w0 tnsnames.ora)
  truststore.jks: $(base64 -w0 truststore.jks)
kind: Secret
metadata:
  name: db-wallet-secret
!
  cd $MTDRWORKSHOP_LOCATION
done


# DB Connection Setup
export TNS_ADMIN=$MTDRWORKSHOP_LOCATION/wallet
cat - >$TNS_ADMIN/sqlnet.ora <<!
WALLET_LOCATION = (SOURCE = (METHOD = file) (METHOD_DATA = (DIRECTORY="$TNS_ADMIN")))
SSL_SERVER_DN_MATCH=yes
!
MTDR_DB_SVC="$(state_get MTDR_DB_NAME)_tp"
TODO_USER=TODOUSER
ORDER_LINK=ORDERTOINVENTORYLINK
ORDER_QUEUE=ORDERQUEUE


# Get DB Password
while true; do
  if DB_PASSWORD=`kubectl get secret dbuser -n mtdrworkshop --template={{.data.dbpassword}} | base64 --decode`; then
    if ! test -z "$DB_PASSWORD"; then
      break
    fi
  fi
  echo "Error: Failed to get DB password.  Retrying..."
  sleep 5
done


# Wait for DB Password to be set in Order DB
while ! state_done MTDR_DB_PASSWORD_SET; do
  echo "`date`: Waiting for MTDR_DB_PASSWORD_SET"
  sleep 2
done


# Create Database Schema and Insert Data
while ! state_done TODO_USER; do
  echo "connecting to mtdr database"
  U=$TODO_USER
  SVC=$MTDR_DB_SVC
  sqlplus /nolog <<!
WHENEVER SQLERROR EXIT 1
connect admin/"$DB_PASSWORD"@$SVC
CREATE USER $U IDENTIFIED BY "$DB_PASSWORD" DEFAULT TABLESPACE data QUOTA UNLIMITED ON data;
GRANT CREATE SESSION, CREATE VIEW, CREATE SEQUENCE, CREATE PROCEDURE TO $U;
GRANT CREATE TABLE, CREATE TRIGGER, CREATE TYPE, CREATE MATERIALIZED VIEW TO $U;
GRANT CONNECT, RESOURCE, pdb_dba, SODA_APP to $U;

CREATE TABLE $U.ORACLE_USERS (
    id_oracle_user NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name           VARCHAR2(100) NOT NULL,
    email          VARCHAR2(100) NOT NULL,
    status         VARCHAR2(50),
    id_telegram    NUMBER(10),
    phone_number   VARCHAR2(20),
    password       VARCHAR2(100) NOT NULL,
    CONSTRAINT pk_oracle_users PRIMARY KEY (id_oracle_user)
);

CREATE TABLE $U.PROJECTS (
    id_project   NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    creation_ts  TIMESTAMP,
    deleted_ts   TIMESTAMP,
    description  VARCHAR2(500),
    name         VARCHAR2(100) NOT NULL,
    CONSTRAINT pk_projects PRIMARY KEY (id_project)
);

CREATE TABLE $U.SPRINTS (
    id_sprint    NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    creation_ts  TIMESTAMP,
    description  VARCHAR2(500),
    name         VARCHAR2(100) NOT NULL,
    id_project   NUMBER(10) NOT NULL,
    CONSTRAINT pk_sprints PRIMARY KEY (id_sprint),
    CONSTRAINT fk_sprints_projects FOREIGN KEY (id_project)
        REFERENCES $U.PROJECTS (id_project)
);

CREATE TABLE $U.PROJECT_USERS (
    id_project_user NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    id_user         NUMBER(10) NOT NULL,
    id_project      NUMBER(10) NOT NULL,
    role_user       VARCHAR2(50),
    status          VARCHAR2(50),
    CONSTRAINT pk_project_users PRIMARY KEY (id_project_user),
    CONSTRAINT fk_project_users_user FOREIGN KEY (id_user)
        REFERENCES $U.ORACLE_USERS (id_oracle_user),
    CONSTRAINT fk_project_users_project FOREIGN KEY (id_project)
        REFERENCES $U.PROJECTS (id_project)
);

CREATE TABLE $U.TASKS (
    id_task          NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    creation_is      TIMESTAMP,
    name             VARCHAR2(100) NOT NULL,
    status           VARCHAR2(50),
    description      VARCHAR2(500),
    story_points     NUMBER(5),
    id_sprint        NUMBER(10) NOT NULL,
    deadline         DATE,
    real_hours       NUMBER(5,2),
    estimated_hours  NUMBER(5,2),
    CONSTRAINT pk_tasks PRIMARY KEY (id_task),
    CONSTRAINT fk_tasks_sprint FOREIGN KEY (id_sprint)
        REFERENCES $U.SPRINTS (id_sprint)
);

CREATE TABLE $U.TASK_ASSIGNEES (
    id_task_assignees NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    id_project_user   NUMBER(10) NOT NULL,
    id_task           NUMBER(10) NOT NULL,
    CONSTRAINT pk_task_assignees PRIMARY KEY (id_task_assignees),
    CONSTRAINT fk_task_assignees_project_user FOREIGN KEY (id_project_user)
        REFERENCES $U.PROJECT_USERS (id_project_user),
    CONSTRAINT fk_task_assignees_task FOREIGN KEY (id_task)
        REFERENCES $U.TASKS (id_task)
);

CREATE TABLE $U.TIME_LOGS (
    id_time_logs      NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    id_task_assignees NUMBER(10) NOT NULL,
    start_ts          TIMESTAMP,
    end_ts            TIMESTAMP,
    CONSTRAINT pk_time_logs PRIMARY KEY (id_time_logs),
    CONSTRAINT fk_time_logs_task_assignees FOREIGN KEY (id_task_assignees)
        REFERENCES $U.TASK_ASSIGNEES (id_task_assignees)
);

CREATE TABLE $U.SKILLS (
    id_skill       NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    id_oracle_user NUMBER(10) NOT NULL,
    name           VARCHAR2(100) NOT NULL,
    description    VARCHAR2(500),
    CONSTRAINT pk_skills PRIMARY KEY (id_skill),
    CONSTRAINT fk_skills_oracle_user FOREIGN KEY (id_oracle_user)
        REFERENCES $U.ORACLE_USERS (id_oracle_user)
);

INSERT INTO $U.ORACLE_USERS (ID_ORACLE_USER, NAME, EMAIL, STATUS, PHONE_NUMBER, PASSWORD) VALUES
(101, 'Carlos Iván Armenta Naranjo', 'A01643070@tec.mx', 'Active', '4381336297', '$2a$10$5utvVWtMQQGhMCAxPcihY.Bjb1aeED5Zfj85nJ/ZZZNjJ16r2GGWG');

INSERT INTO $U.ORACLE_USERS (ID_ORACLE_USER, NAME, EMAIL, STATUS, PHONE_NUMBER, PASSWORD) VALUES
(102, 'Arturo Ramos Martínez', 'A01643269@tec.mx', 'Active', '4381184550', '$2a$10$F5m9jXaKac4E2fESdJqKQuS2/76PEMHz2U6ERpPC.rbLHJTpDvsBy');

INSERT INTO $U.ORACLE_USERS (ID_ORACLE_USER, NAME, EMAIL, STATUS, PHONE_NUMBER, PASSWORD) VALUES
(103, 'Jorge Javier Blásquez Gonzalez', 'A01637706@tec.mx', 'Active', '3334546700', '$2a$10$/pr147ORNix.wdmkPpJxL.4USRDOp331udFiyTVwexLzcd7wal0zC');

INSERT INTO $U.ORACLE_USERS (ID_ORACLE_USER, NAME, EMAIL, STATUS, PHONE_NUMBER, PASSWORD) VALUES
(104, 'Bryan Ithan Landín Lara', 'A01636271@tec.mx', 'Active', '6122013067', '$2a$10$YHBrGQ8MDF1dJBygBUvPfec5aLVyQ/ebR2Hm.M3RckVR0nq.NYKRm');

INSERT INTO $U.ORACLE_USERS (ID_ORACLE_USER, NAME, EMAIL, STATUS, PHONE_NUMBER, PASSWORD) VALUES
(105, 'Moisés Adrián Cortés Ramos', 'A01642492@tec.mx', 'Active', '3751269010', '$2a$10$a3ZIdSrfItgRUIJ/x6A8Ee0kGFsixQqzsFglSrCovdjN08z/Lb1ky');

INSERT INTO $U.ORACLE_USERS (ID_ORACLE_USER, NAME, EMAIL, STATUS, PHONE_NUMBER, PASSWORD) VALUES
(106, 'Adolfo Hernández Signoret', 'A01637184@tec.mx', 'Active', '3322543331', '$2a$10$fQx3caOERFibjxdTZlF4xutGkilUDFlS.vhaLbD6Q1pKWU.I6QtQC');

INSERT INTO $U.PROJECTS (ID_PROJECT, CREATION_TS, DESCRIPTION, NAME) VALUES
(101, TIMESTAMP '2025-03-24 09:30:30', 
'Este es un proyecto de una herramienta de manejo de equipos y tareas mediante un bot de telegram y un dashboard de React con Java desplegado en OCI',
'Task Management Tool Project');

INSERT INTO $U.PROJECT_USERS (ID_PROJECT_USER, ID_USER, ID_PROJECT, ROLE_USER, STATUS) VALUES
(101, 101, 101, 'developer', 'active');

INSERT INTO $U.PROJECT_USERS (ID_PROJECT_USER, ID_USER, ID_PROJECT, ROLE_USER, STATUS) VALUES
(102, 102, 101, 'developer', 'active');

INSERT INTO $U.PROJECT_USERS (ID_PROJECT_USER, ID_USER, ID_PROJECT, ROLE_USER, STATUS) VALUES
(103, 103, 101, 'developer', 'active');

INSERT INTO $U.PROJECT_USERS (ID_PROJECT_USER, ID_USER, ID_PROJECT, ROLE_USER, STATUS) VALUES
(104, 104, 101, 'developer', 'active');

INSERT INTO $U.PROJECT_USERS (ID_PROJECT_USER, ID_USER, ID_PROJECT, ROLE_USER, STATUS) VALUES
(105, 105, 101, 'developer', 'active');

INSERT INTO $U.PROJECT_USERS (ID_PROJECT_USER, ID_USER, ID_PROJECT, ROLE_USER, STATUS) VALUES
(106, 106, 101, 'manager', 'active');

INSERT INTO $U.SPRINTS (ID_SPRINT, CREATION_TS, DESCRIPTION, NAME, ID_PROJECT) VALUES
(101, TIMESTAMP '2025-03-24 10:00:32', 'Active', 'Sprint Death Star', 101);

INSERT INTO $U.TASKS (ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS, ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS) VALUES
(101, TIMESTAMP '2025-03-24 10:00:00', 'Nuevo Modelo', 'COMPLETED',
'Definir el nuevo modelo relacional de nuestra DB considerando sprints y diferentes proyectos y déjalo ya en la DB en OCI.', 2, 101, DATE '2025-03-28', 3, 2);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(101, 106, 101);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(102, TIMESTAMP '2025-03-24 10:01:00', 'FrontEnd Bot Flow Parte 1', 'COMPLETED',
'Agregar la UI en Telegram con el flujo de interfaces que vamos a tener para los sprints roles y demás.', 4, 101, DATE '2025-03-28', 4, 4);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(102, 103, 102);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(103, TIMESTAMP '2025-03-24 10:02:00', 'Telegram Metadata', 'COMPLETED',
'Investigar como podemos obtener el quien está mandando el mensaje el como y su ID de telegram y otra información que podamos obtener.', 3, 101, DATE '2025-03-28', 7, 3);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(103, 105, 103);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(104, TIMESTAMP '2025-03-31 10:02:00', 'FrontEnd Bot Flow Parte 2', 'COMPLETED',
'Agregar la UI en Telegram con el flujo de interfaces que vamos a tener para los sprints roles y demás.', 4, 101, DATE '2025-04-06', 4, 4);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(104, 104, 104);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(105, TIMESTAMP '2025-03-31 10:03:00', 'User Flow Parte 1', 'COMPLETED',
'Revisar el flujo desde cambiar de estado de un user, añadir task, poder tomar tickets libres por story_points.', 7, 101, DATE '2025-04-04', 4, 6);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(105, 102, 105);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(106, TIMESTAMP '2025-03-31 10:03:00', 'KPIs en reportes 2', 'COMPLETED',
'Añadir lógica de reportes', 4, 101, DATE '2025-04-04', 4, 4);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(106, 104, 106);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(107, TIMESTAMP '2025-03-31 10:03:00', 'KPIs en reportes 1', 'COMPLETED',
'Añadir lógica de reportes', 4, 101, DATE '2025-04-04', 4, 4);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(107, 105, 107);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(108, TIMESTAMP '2025-03-31 10:03:00', 'User Flow Parte 2', 'COMPLETED',
'Revisar el flujo desde cambiar de estado de un user, añadir task, poder tomar tickets libres por story_points.', 7, 101, DATE '2025-04-04', 4, 6);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(108, 101, 108);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(109, TIMESTAMP '2025-03-31 10:03:00', 'User Flow Parte 3', 'COMPLETED',
'Revisar el flujo desde cambiar de estado de un user, añadir task, poder tomar tickets libres por story_points.', 7, 101, DATE '2025-04-04', 6, 6);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(109, 102, 109);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(110, TIMESTAMP '2025-03-31 10:10:00', 'Uso de la herramienta', 'COMPLETED',
'Llenado de datos reales en el bot sobre nuestro primer sprint', 1, 101, DATE '2025-04-04', 2, 1);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(110, 106, 110);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(111, TIMESTAMP '2025-03-31 10:10:00', 'Desplegar en OCI', 'COMPLETED',
'Desplegar el código de nuestro primer sprint en la infrastructura de oracle cloud', 6, 101, DATE '2025-04-04', 4, 4);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(111, 101, 111);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(112, TIMESTAMP '2025-03-31 10:12:20', 'Implementación de datos estáticos', 'COMPLETED',
'Generar datos estáticos para probar el frontend del bot con datos que simulan respuestas del backend', 3, 101, DATE '2025-04-06', 2, 2);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(112, 103, 112);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, REAL_HOURS, ESTIMATED_HOURS
) VALUES
(113, TIMESTAMP '2025-03-31 10:18:30', 'Testing estático de validación de requerimientos', 'COMPLETED',
'Validar que se hayan satisfacido los requerimientos funcionales y no funcionales de manera manual.', 2, 101, DATE '2025-04-06', 2, 2);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(113, 103, 113);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, ESTIMATED_HOURS
) VALUES
(114, TIMESTAMP '2025-03-31 10:20:00', 'Logica  de real hours', 'ASSIGNED',
'Calcular la lógica de las horas reales basado an los distintos tiempos activados.', 4, 101, DATE '2025-04-06', 4);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(114, 102, 114);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, ESTIMATED_HOURS
) VALUES
(115, TIMESTAMP '2025-03-31 10:20:00', 'Probar endpoints de timelogs', 'ASSIGNED',
'Hacer pruebas de las distintas acciones de tiempo como activar y desactivar para ver los cambios.', 6, 101, DATE '2025-04-06', 4);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(115, 105, 115);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, ESTIMATED_HOURS
) VALUES
(116, TIMESTAMP '2025-03-31 10:30:00', 'Crear Model Skills', 'ASSIGNED',
'Crear un modelo en lugar de un solo párrafo para normalizar los fields de skills de cada developer.', 2, 101, DATE '2025-04-06', 1);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(116, 103, 116);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, ESTIMATED_HOURS
) VALUES
(117, TIMESTAMP '2025-03-31 10:34:00', 'Crear controlador, service y repositorio de Skills', 'ASSIGNED',
'Tomando el modelo de skills, implementarlo en el sistema.', 6, 101, DATE '2025-04-06', 4);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(117, 106, 117);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, ESTIMATED_HOURS
) VALUES
(118, TIMESTAMP '2025-03-31 10:37:00', 'Probar endpoints skills', 'ASSIGNED',
'Hacer testing y validación de la funcionalidad', 2, 101, DATE '2025-04-06', 2);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(118, 104, 118);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, ESTIMATED_HOURS
) VALUES
(119, TIMESTAMP '2025-03-31 11:00:00', 'Integrar Skills al bot (asignación inteligente)', 'ASSIGNED',
'Utilizar los skills normalizados en una tabla para pasarlos al método de asignación inteligente.', 3, 101, DATE '2025-04-06', 3);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(119, 101, 119);

INSERT INTO $U.TASKS (
    ID_TASK, CREATION_IS, NAME, STATUS, DESCRIPTION, STORY_POINTS,
    ID_SPRINT, DEADLINE, ESTIMATED_HOURS
) VALUES
(120, TIMESTAMP '2025-03-31 11:10:00', 'Modificar service de openAi para el nuevo modelo de ER', 'ASSIGNED',
'Adaptar el actual uso del modelo que utiliza un párrafo a que haga un query de la tabla de skills en su lugar.', 2, 101, DATE '2025-04-06', 2);

INSERT INTO $U.TASK_ASSIGNEES (
    ID_TASK_ASSIGNEES, ID_PROJECT_USER, ID_TASK
) VALUES
(120, 106, 120);


commit;
!
  state_set_done TODO_USER
  echo "finished connecting to database and creating attributes"
done

# DB Setup Done
state_set_done DB_SETUP